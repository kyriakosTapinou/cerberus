#======== AMREX ==========
amrex.fpe_trap_invalid=1
amrex.fpe_trap_zero=1
fpe_trap_overflow=1
amr.v = 0

# ======== TIME ==========
max_step  = 100000 # 10000000
stop_time = 1. #0.030973980073944

# ======== DOMAIN ==========
geometry.is_periodic = 0 0 0  
geometry.coord_sys   = 0  # 0 => cart, 1 => RZ  2=>spherical

# lo. res.
geometry.prob_lo     = -1 # -25.0 #-1.0
geometry.prob_hi     = 1  #  25.0  #1.0
amr.n_cell           = 16 #2048 # 4

# ======== LOAD BALANCE ==========
amr.loadbalance_with_workestimates = 0
amr.loadbalance_level0_int = 10

# ======== GRID ==========
amr.max_level       = 6      # maximum level number allowed
amr.ref_ratio       = 2 2 2 2 2 2 2 2 2 # refinement ratio
amr.regrid_int      = 2 2 2 2 2 2 2 2 2 # how often to regrid
amr.blocking_factor = 8
amr.max_grid_size   = 32
amr.n_error_buf     = 4 4 4 4 4 4 4 4 4 # number of buffer cells in error est
amr.grid_eff        = 0.99     # what constitutes an efficient grid
amr.subcycling_mode = Auto # time sub-cycling (Auto, None, Manual, Optimal)

# ======== GEOMETRY ==========
#eb2.geom_type = all_regular

# ======== PARTICLES ==========
particles.do_particles = 0

# ======== OUTPUT ==========

# CHECKPOINT FILES
amr.checkpoint_files_output = 1
amr.check_file              = Riemann-2F-Braginskii.chk    # root name of checkpoint file
amr.check_int               = -1    # number of timesteps between checkpoints
amr.check_per               = 1e-1

# PLOTFILES
amr.plot_files_output = 1
amr.plot_file         = Riemann-2F-Braginskii.plt     # root name of plotfile
amr.plot_int          = -1      # number of timesteps between plotfiles
amr.plot_per          = 1e-3


# ======== PROBLEM DESCRIPTION ==========
# Note that the problem description is defined as a lua script
# Everything within the double quotes "..." must conform to lua standards
# Note that any strings should therefore be defined by single quotes '...'

mfp.lua = "
verbosity = 1
cfl = 0.5
cfl_viscous = 1000
do_CTU = 0 -- turn of corner transport upwind 
do_face_sources = 0
-- === DEFINE PROBLEM ===
lightspeed = 25 --100.0
Larmor = 1/30 --1/300
Debye = Larmor/lightspeed --Larmor/100

ref_length =  1e11 -- m

mu_0= 1.25663706e-6 ; -- m kg s-2 A-2
n_ref = 1e7;
u_ref = 299792458.0/lightspeed;
B_ref = 10e10;
skinyBoi = Debye*lightspeed --skin depth
betaBoi = 2*(Larmor/skinyBoi)^2 -- magnetic interaction parameter
ref_mass = B_ref^2*betaBoi/(2*mu_0*n_ref*u_ref^2) -- kg
ref_density = ref_mass*n_ref -- kg/m^3

mass_ratio = 100 --1836.0

interface_x = 0.0

rho0 = 1.0
p0 = 0.5
u0 = 0.0
v0 = 0.0
w0 = 0.0

Bx0 = 0.75
By0 = 1.0
Bz0 = 0.0

rho1 = 0.125
p1 = 0.05
u1 = 0.0
v1 = 0.0
w1 = 0.0

Bx1 = 0.75
By1 = -1
Bz1 = 0.0

function step(A, B, x)
    if (x <= interface_x) then
        return A
    else
        return B
    end
end

-- === DEFINE STATES ===

states = {

    ions = {
        type='hydro',
        mass=1.0,  
        charge= 1.0, 
        gamma=5/3, 
        reconstruction='vanLeer',
        flux='HLLE',
        refine_grad_threshold = {rho=0.1},
        value = {
            rho   = function(dat) return step(rho0, rho1, dat['x']) end,
            x_vel = function(dat) return step(u0,   u1,   dat['x']) end,
            y_vel = function(dat) return step(v0,   v1,   dat['x']) end,
            z_vel = function(dat) return step(w0,   w1,   dat['x']) end,
            p =   function(dat) return step(p0,   p1,   dat['x']) end,
        },
        viscosity = {mu0=1.7894e-5, T0=273.11, BT=1, cfl=cfl_viscous , type='BraginskiiIon'},
    },

    electrons = {
        type='hydro',
        mass=1.0/mass_ratio,  
        charge= -1.0, 
        gamma=5/3, 
        reconstruction='vanLeer',
        flux='HLLE',
        refine_grad_threshold = {rho=0.1},
        value = {
            rho   = function(dat) return step(rho0/mass_ratio, rho1/mass_ratio, dat['x']) end,
            x_vel = function(dat) return step(u0,   u1,   dat['x']) end,
            y_vel = function(dat) return step(v0,   v1,   dat['x']) end,
            z_vel = function(dat) return step(w0,   w1,   dat['x']) end,
            p =   function(dat) return step(p0,   p1,   dat['x']) end,
        },
        viscosity = {mu0=1.7894e-5, T0=273.11, BT=1, cfl=cfl_viscous, type='BraginskiiEle'},
    },

    

    field = {
        type='field',
        reconstruction='vanLeer',
        flux='RankineHugoniot',
        value = {
            x_B  = function(dat) return step(Bx0, Bx1, dat['x']) end,
            y_B  = function(dat) return step(By0, By1, dat['x']) end,
            z_B  = function(dat) return step(Bz0, Bz1, dat['x']) end,
        },
        project_divergence = 1,
    },
}

sources = {

    two_fluid={
        solver = 'explicit',
        sources = {
            plasma={
                'ions', 'electrons', 'field', type='plasma5',
            },            
            braginskii={'ions', 'electrons', 'field', type='braginskii',
                        reconstruction='vanLeer',},
        },
    }, 
}

"
